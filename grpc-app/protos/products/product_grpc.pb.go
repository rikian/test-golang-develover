// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/product.proto

package products

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductRPCClient is the client API for ProductRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductRPCClient interface {
	InsertProduct(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAllProduct(ctx context.Context, in *RequestGetAllProduct, opts ...grpc.CallOption) (*ResponseGetAllProduct, error)
	GetProductById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateProduct(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DeleteProduct(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type productRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewProductRPCClient(cc grpc.ClientConnInterface) ProductRPCClient {
	return &productRPCClient{cc}
}

func (c *productRPCClient) InsertProduct(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.ProductRPC/InsertProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRPCClient) GetAllProduct(ctx context.Context, in *RequestGetAllProduct, opts ...grpc.CallOption) (*ResponseGetAllProduct, error) {
	out := new(ResponseGetAllProduct)
	err := c.cc.Invoke(ctx, "/protos.ProductRPC/GetAllProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRPCClient) GetProductById(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.ProductRPC/GetProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRPCClient) UpdateProduct(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.ProductRPC/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productRPCClient) DeleteProduct(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protos.ProductRPC/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductRPCServer is the server API for ProductRPC service.
// All implementations must embed UnimplementedProductRPCServer
// for forward compatibility
type ProductRPCServer interface {
	InsertProduct(context.Context, *Request) (*Response, error)
	GetAllProduct(context.Context, *RequestGetAllProduct) (*ResponseGetAllProduct, error)
	GetProductById(context.Context, *Request) (*Response, error)
	UpdateProduct(context.Context, *Request) (*Response, error)
	DeleteProduct(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedProductRPCServer()
}

// UnimplementedProductRPCServer must be embedded to have forward compatible implementations.
type UnimplementedProductRPCServer struct {
}

func (UnimplementedProductRPCServer) InsertProduct(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertProduct not implemented")
}
func (UnimplementedProductRPCServer) GetAllProduct(context.Context, *RequestGetAllProduct) (*ResponseGetAllProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduct not implemented")
}
func (UnimplementedProductRPCServer) GetProductById(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedProductRPCServer) UpdateProduct(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductRPCServer) DeleteProduct(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductRPCServer) mustEmbedUnimplementedProductRPCServer() {}

// UnsafeProductRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductRPCServer will
// result in compilation errors.
type UnsafeProductRPCServer interface {
	mustEmbedUnimplementedProductRPCServer()
}

func RegisterProductRPCServer(s grpc.ServiceRegistrar, srv ProductRPCServer) {
	s.RegisterService(&ProductRPC_ServiceDesc, srv)
}

func _ProductRPC_InsertProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRPCServer).InsertProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ProductRPC/InsertProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRPCServer).InsertProduct(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRPC_GetAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAllProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRPCServer).GetAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ProductRPC/GetAllProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRPCServer).GetAllProduct(ctx, req.(*RequestGetAllProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRPC_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRPCServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ProductRPC/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRPCServer).GetProductById(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRPC_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRPCServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ProductRPC/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRPCServer).UpdateProduct(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductRPC_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRPCServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ProductRPC/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRPCServer).DeleteProduct(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductRPC_ServiceDesc is the grpc.ServiceDesc for ProductRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ProductRPC",
	HandlerType: (*ProductRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertProduct",
			Handler:    _ProductRPC_InsertProduct_Handler,
		},
		{
			MethodName: "GetAllProduct",
			Handler:    _ProductRPC_GetAllProduct_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _ProductRPC_GetProductById_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ProductRPC_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ProductRPC_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/product.proto",
}
