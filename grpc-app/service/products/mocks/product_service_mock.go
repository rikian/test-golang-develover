// Code generated by MockGen. DO NOT EDIT.
// Source: grpc-app/service/products/product.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	products "go/service1/grpc-app/protos/products"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductsService is a mock of ProductsService interface.
type MockProductsService struct {
	ctrl     *gomock.Controller
	recorder *MockProductsServiceMockRecorder
}

// MockProductsServiceMockRecorder is the mock recorder for MockProductsService.
type MockProductsServiceMockRecorder struct {
	mock *MockProductsService
}

// NewMockProductsService creates a new mock instance.
func NewMockProductsService(ctrl *gomock.Controller) *MockProductsService {
	mock := &MockProductsService{ctrl: ctrl}
	mock.recorder = &MockProductsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsService) EXPECT() *MockProductsServiceMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockProductsService) DeleteProduct(arg0 context.Context, arg1 *products.Request) (*products.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(*products.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductsServiceMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductsService)(nil).DeleteProduct), arg0, arg1)
}

// GetAllProduct mocks base method.
func (m *MockProductsService) GetAllProduct(arg0 context.Context, arg1 *products.RequestGetAllProduct) (*products.ResponseGetAllProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", arg0, arg1)
	ret0, _ := ret[0].(*products.ResponseGetAllProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductsServiceMockRecorder) GetAllProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductsService)(nil).GetAllProduct), arg0, arg1)
}

// GetProductById mocks base method.
func (m *MockProductsService) GetProductById(arg0 context.Context, arg1 *products.Request) (*products.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0, arg1)
	ret0, _ := ret[0].(*products.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductsServiceMockRecorder) GetProductById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductsService)(nil).GetProductById), arg0, arg1)
}

// InsertProduct mocks base method.
func (m *MockProductsService) InsertProduct(arg0 context.Context, arg1 *products.Request) (*products.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", arg0, arg1)
	ret0, _ := ret[0].(*products.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockProductsServiceMockRecorder) InsertProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductsService)(nil).InsertProduct), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockProductsService) UpdateProduct(arg0 context.Context, arg1 *products.Request) (*products.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(*products.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductsServiceMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductsService)(nil).UpdateProduct), arg0, arg1)
}
