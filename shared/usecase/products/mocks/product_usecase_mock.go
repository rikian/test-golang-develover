// Code generated by MockGen. DO NOT EDIT.
// Source: shared/usecase/products/product.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	products "go/service1/grpc-app/protos/products"
	table "go/service1/shared/models/entities/table"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUseCase is a mock of ProductUseCase interface.
type MockProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUseCaseMockRecorder
}

// MockProductUseCaseMockRecorder is the mock recorder for MockProductUseCase.
type MockProductUseCaseMockRecorder struct {
	mock *MockProductUseCase
}

// NewMockProductUseCase creates a new mock instance.
func NewMockProductUseCase(ctrl *gomock.Controller) *MockProductUseCase {
	mock := &MockProductUseCase{ctrl: ctrl}
	mock.recorder = &MockProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUseCase) EXPECT() *MockProductUseCaseMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockProductUseCase) DeleteProduct(arg0 context.Context, arg1 *products.Request) (*table.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(*table.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductUseCaseMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductUseCase)(nil).DeleteProduct), arg0, arg1)
}

// GetAllProduct mocks base method.
func (m *MockProductUseCase) GetAllProduct(arg0 context.Context, arg1 *products.RequestGetAllProduct) ([]table.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", arg0, arg1)
	ret0, _ := ret[0].([]table.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockProductUseCaseMockRecorder) GetAllProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockProductUseCase)(nil).GetAllProduct), arg0, arg1)
}

// GetProductById mocks base method.
func (m *MockProductUseCase) GetProductById(arg0 context.Context, arg1 *products.Request) (*table.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0, arg1)
	ret0, _ := ret[0].(*table.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductUseCaseMockRecorder) GetProductById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductUseCase)(nil).GetProductById), arg0, arg1)
}

// InsertProduct mocks base method.
func (m *MockProductUseCase) InsertProduct(arg0 context.Context, arg1 *products.Request) (*table.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", arg0, arg1)
	ret0, _ := ret[0].(*table.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockProductUseCaseMockRecorder) InsertProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductUseCase)(nil).InsertProduct), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockProductUseCase) UpdateProduct(arg0 context.Context, arg1 *products.Request) (*table.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(*table.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductUseCaseMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductUseCase)(nil).UpdateProduct), arg0, arg1)
}
